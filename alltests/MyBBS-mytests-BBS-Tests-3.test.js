
(([MyBigInt, MyBBS, expect]) => {

    describe('[TASK4] MyBBS-mytests-BBS-Tests-3', () => {
    
            describe('BBS-Test-1 All', () => {

                const zs = ['168','9','81','82','36','42','92','104','157','196','169','137','168','9','81','82'];
                const opts = {
                    module: MyBigInt.fromString('209'),
                    seed: MyBigInt.fromString('148')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-1 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(24758);
                });

                it('BBS-Test-1 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-2 All', () => {

                const zs = ['941127','580432','604726','307486','972452','719714','382453','825979','1030670','406131','524504','1064334','1093774','1172845','263478','328719'];
                const opts = {
                    module: MyBigInt.fromString('1303301'),
                    seed: MyBigInt.fromString('674166')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-2 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(33605);
                });

                it('BBS-Test-2 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-3 All', () => {

                const zs = ['928168','26374669','16318983','195630','2214828','24607789','15971882','3320405','14664519','23129488','8132593','6258516','10466023','12036337','9301027','1435995'];
                const opts = {
                    module: MyBigInt.fromString('27974329'),
                    seed: MyBigInt.fromString('20387271')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-3 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(26031);
                });

                it('BBS-Test-3 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-4 All', () => {

                const zs = ['497565926794837','677380096029071','288601795238510','458972420031061','331434055028199','703441679018547','700156865589719','313773143534191','297313454505401','129260242914743','376293017376611','102721966466599','528568567427568','611393781301210','368583569864202','141848882180922'];
                const opts = {
                    module: MyBigInt.fromString('809904605587321'),
                    seed: MyBigInt.fromString('751155201443067')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-4 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(57328);
                });

                it('BBS-Test-4 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-5 All', () => {

                const zs = ['54190113383202452268654','51456960850635598824964','35487118033648267994046','35173635222731200981897','20823326419697590401272','58990433345690455859463','58632043615711742804499','23327955885149994570418','41120428913827794083136','61523338022718935146966','3101762300676767699627','20437531905291779358780','8209277212198903585385','45791570478469469387476','16468725087422829921396','68361541969081064666403'];
                const opts = {
                    module: MyBigInt.fromString('69222045764240499233177'),
                    seed: MyBigInt.fromString('62135407646700388182761')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-5 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(5673);
                });

                it('BBS-Test-5 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-6 All', () => {

                const zs = ['1966721977108861227064640328116','15084144569481075625491432841586','7948679583212103870030998926463','4092021407524068962463706544213','8983654867169605202737973772439','12918978894718347676764953044555','13587484750806759149261946042207','11011424434705009395527848598879','7451718830572547054304068302869','5959691387360222823385835910216','7211649172631601750863487597336','10924272917019892834815723991778','13185921742216950731718278354597','14862766282408857579624668049811','12497748213826955709797861060570','7304655030093136621872714551561'];
                const opts = {
                    module: MyBigInt.fromString('15614506077883827596807695583497'),
                    seed: MyBigInt.fromString('14613471861593884094765892101198')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-6 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(16269);
                });

                it('BBS-Test-6 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-7 All', () => {

                const zs = ['19857159151765786986681273329810851117913747636325','57981639287867684613656192743520825668303301679167','906630903876170012015386816498928561876545211990','74543474026642469761778413100663064554028242638732','2040659979076310880436271413030017023280074460531','73284234303789382075994182214952142241594356177232','25166075266790119943645985574105496235254253741107','82527851574613989546733481132558321863636939695902','52844811463393685034848879305027176230197847379832','15930203234923351805366473402958330008187077251818','50658938257424775174942505542397927269074083925562','1057063375077869388054524277527366703822822388666','58584792548148610255251190329649092668327971394505','17794553989377546044150282190314232541361370733993','31229912495782424744914744979842575815456897011642','110270433642689337881838462307335937695731359841606'];
                const opts = {
                    module: MyBigInt.fromString('116417811992912006411152334381514201366183431868281'),
                    seed: MyBigInt.fromString('64210270662297813283980729314264584827539659644751')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-7 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(51724);
                });

                it('BBS-Test-7 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-8 All', () => {

                const zs = ['1260193007463313199817268918395533622465511130480340553940061030619','1287210399428689333283577627012083444960146838188329154846593430061','77641047212666903805995680598196544486375712415542564274406509128','817038880866478653574309445663174362528299990191351731696736624976','313679059893217608014298123311402906702666066709467845205388554060','1135303957116320204575204559802171962110210870391037446160416146271','239242985456204089507641433142398494784055448232225946875742898008','324137064815227329056754725340248000441457648268127582662904212637','480301666707532765222529623338214779718945290078137812640097893887','1127921724194458470118568778121076951765408807513847506542657106477','306705345285538570566904151419084543639431847836989636925409003275','76158239112606861622266050535725588117558171657233493439978706293','81145193565481658265890691451876545209487063173533641976156311154','279854129233626500692228296903550309911545144377764526484236634911','1069965849936851551149905560137163361496018885249264796813758558078','1213623831508461200135339098439775526379097016653629998217931924772'];
                const opts = {
                    module: MyBigInt.fromString('1365203543457900569050238944483632756046250669867899974170434060609'),
                    seed: MyBigInt.fromString('1256633180821048449405232262655960849170408463787574846636432104727')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-8 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(50676);
                });

                it('BBS-Test-8 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-9 All', () => {

                const zs = ['121382148904368957199975589623974408296979658917235380872521270997166143279060787717404346','115682561523757922570183464461242133750617581792946656168194601516286715130762430005126535','134858523754806131403501075224336387524077761432898221165147779702720388663190339878556107','14468460859949937961882612893348382618848569979115199739131025089389887225677777260958109','30087152925639969385393305575549488745764566432803105154924646969142437730795144103432236','101968570042221886043234081521682349649843810081264941492686928495190494369708595916958223','41356744920850953005550130892169942794912655500386522092859511308228151473012939349136551','79897211374355172671774600318970957915352778891332013880956914476451156191736804879440024','9393279822855184508184776080227262600011692478638700124202934339244356742920518409497031','83139503204265474648369035837172638906605443009201822784932323489570275020349375289287453','14975484169954637386116096657797937539251840711341221524876639617478034164144494972598877','4671690549433901508632293036501767321496483062642900559453691797318236119475394425573849','109463695866961042562120094605185513852260467254617623206818971259069931080419002244553629','8626664716720357515263032974847163009620863455154733049683595117438102714738198420938722','5505586901053968514805825109665929006922664492733692174655360473497756685346573368467015','52515871824487278804721804998531974763466242630177107476922985959463710613677917362025129'];
                const opts = {
                    module: MyBigInt.fromString('149908032533629445365949756765998252510434823968087256129498451602638892019398377124202333'),
                    seed: MyBigInt.fromString('113709491400269885277403904471989603672633804879513121699647131330286233410113324528427181')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-9 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(30459);
                });

                it('BBS-Test-9 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-10 All', () => {

                const zs = ['1260193007463313199817268918395533622465511130480340553940061030619','1287210399428689333283577627012083444960146838188329154846593430061','77641047212666903805995680598196544486375712415542564274406509128','817038880866478653574309445663174362528299990191351731696736624976','313679059893217608014298123311402906702666066709467845205388554060','1135303957116320204575204559802171962110210870391037446160416146271','239242985456204089507641433142398494784055448232225946875742898008','324137064815227329056754725340248000441457648268127582662904212637','480301666707532765222529623338214779718945290078137812640097893887','1127921724194458470118568778121076951765408807513847506542657106477','306705345285538570566904151419084543639431847836989636925409003275','76158239112606861622266050535725588117558171657233493439978706293','81145193565481658265890691451876545209487063173533641976156311154','279854129233626500692228296903550309911545144377764526484236634911','1069965849936851551149905560137163361496018885249264796813758558078','1213623831508461200135339098439775526379097016653629998217931924772'];
                const opts = {
                    module: MyBigInt.fromString('1365203543457900569050238944483632756046250669867899974170434060609'),
                    seed: MyBigInt.fromString('1256633180821048449405232262655960849170408463787574846636432104727')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-10 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(50676);
                });

                it('BBS-Test-10 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-11 All', () => {

                const zs = ['121382148904368957199975589623974408296979658917235380872521270997166143279060787717404346','115682561523757922570183464461242133750617581792946656168194601516286715130762430005126535','134858523754806131403501075224336387524077761432898221165147779702720388663190339878556107','14468460859949937961882612893348382618848569979115199739131025089389887225677777260958109','30087152925639969385393305575549488745764566432803105154924646969142437730795144103432236','101968570042221886043234081521682349649843810081264941492686928495190494369708595916958223','41356744920850953005550130892169942794912655500386522092859511308228151473012939349136551','79897211374355172671774600318970957915352778891332013880956914476451156191736804879440024','9393279822855184508184776080227262600011692478638700124202934339244356742920518409497031','83139503204265474648369035837172638906605443009201822784932323489570275020349375289287453','14975484169954637386116096657797937539251840711341221524876639617478034164144494972598877','4671690549433901508632293036501767321496483062642900559453691797318236119475394425573849','109463695866961042562120094605185513852260467254617623206818971259069931080419002244553629','8626664716720357515263032974847163009620863455154733049683595117438102714738198420938722','5505586901053968514805825109665929006922664492733692174655360473497756685346573368467015','52515871824487278804721804998531974763466242630177107476922985959463710613677917362025129'];
                const opts = {
                    module: MyBigInt.fromString('149908032533629445365949756765998252510434823968087256129498451602638892019398377124202333'),
                    seed: MyBigInt.fromString('113709491400269885277403904471989603672633804879513121699647131330286233410113324528427181')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-11 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(30459);
                });

                it('BBS-Test-11 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-12 All', () => {

                const zs = ['160427784578778741646507147018239092186259850586665084943579246264090466390572945586205724181276507439602298','114892351987922015165882451655496732133247774968300847757682602750350427012156539584170473227494094011584126','124869992511748937179793583991356217760737466892638981995811327535159009068904391595112815534106744824738044','9458611133057186504788218572656699290500473280591947726835161008482969003542244763555051359826520730208281','133889170548926396308289950014994530821929689478611020661310703748053595918326972771999940897825508125439354','225704908734859546925719515229455873099039230881525072357959848261719569819435422939591179367721206492285225','101455517286859467969225729691979855424528974199135402085728043561971499198656474668665485858450053974120149','10556406824910901187472108804460386542959398295763505015687218496817573993011107532813135001017934214550974','86115152409728814305993113634403666852289544833939699063106174847403465843392137693266169767869283215329814','52673805399971781841626617874581513511761158746483116012101938110813715845070606775331151812709383026653524','213101971324338576603728701569685404515172122929005289989851719244118659627191805385778827245084916831968800','234333686697841192495237023294152082776598111430028318158689398296515676567362976614722061088314424600524424','214967396937658234846900270589756378080645002345842310653566449726035380292927373498329266493209455194237573','1093776010339116726188804525113200393523241646265169189301485096858470603251584368083172023962543399649284','204161842565996213358040765340511658394180973222962069167874258082950401929651833242017700482313947547907332','163874074727881758545016903009466409171259543265254654115112114962929814059779312254931962837208204488628507'];
                const opts = {
                    module: MyBigInt.fromString('237669811190956328181644956025488952961620746704788811470262941549578491256504801407777463800664937058961453'),
                    seed: MyBigInt.fromString('145316866310935796077316814470018501929506932581273733913160487936875709885702917784802598838716427233158104')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-12 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(5641);
                });

                it('BBS-Test-12 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-13 All', () => {

                const zs = ['341132966731192469343269242512836990370566690542180129958763221666181840838747315144482488587081880383788544902645964224712397542960948934843539','969690951354207862931840661879972975061593077554481603979703577329966983529542728313796286754605024102475469057772535708714713605457877735089754','1088403724203998242536492990555674603809385233829800432708168815557368333794461833378899017552612563971367688950378776121404924931934946585344632','971155767966431757452858613082019643583940131464565323688907543064266268456432541935755009276300610556676573267084444354754328500259987262987223','350529398453518691106601521068497810872445727646681962722997432884862699530677333842489971875560057848194753815181805483662818753560999349761301','211822381555363852320298572979944824457818164056819974358443978766141589718299021079383698349831044555402985466204792539420942098986278551561898','426988315651730676982782075589424565009304297741015280143697378454743056055723018220458380028651389764643825193376172844019656047583838010981485','85932656506335348364105769991028966639345468863694877020883032998745262605316026323677679956165732903739288414741372391413852262350649900039154','127504269555361295794233855220420434255481825729776021802422723168267112044590245759117129525986161597532144176992542088554762151024445040007554','1084251268647762043946004833731677027950421454273811137660928048508953271668204298831023814485827938428955253320447148405524018676140827279056072','845553496497653062386553797907674420956435056296109074813575351695939318950086049282098665954334930338104131342081873442152029560360433617071594','822932450294013100353336661260921528048210102321725832843094265868726111039810130639622915511453343728572176623179082470158305310565995798447659','97139493881296063074451183939311365672909676188280649348732923869157565941926184411073661796950440992226260995444626619108641145636157786372802','119953580103251627159816329915128385775554438799142273006375472926506616102991366968652217664945839573296976734391929254930760283130341659050369','338969830783134158237437257918180668395679959647194308225048090044903790918000699600687714500365140677978482441448911461580950946243016111131160','56613993421467088523472794002960116150436676285835414350169933849547810346576762941146767455849767682451748459808542042291325092789021978174396'];
                const opts = {
                    module: MyBigInt.fromString('1133926407261195020208358797032363281025973508457414832385296935508901699203905602262384739297215711621346681130926428992412407638891328226657729'),
                    seed: MyBigInt.fromString('997735690930060605384606767925065056436602245124361261529321378949198427432075500619119048022571610501957313206717328664587808250911212707511420')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-13 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(39444);
                });

                it('BBS-Test-13 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-14 All', () => {

                const zs = ['773697628988473658982692752365749631366964786571284304437285676733860907601984429895042806897817750778144308625326817177683861960333850419300152374532100620265803425168811907915555','141662182265742297113354745863549101182261537801677800435316598120668785664364805044453001669167564667212605294341366869123424440803571409921234534674230554069982379039711741778212','693099423678061476512897370100799175252928234769789042599564862436676459691675703237452374597603762970624194809555085891312227623763333904469172883455339551061054504034552355509361','354194953621819517362479460403331601338298135805050359157483801385097096222229697258887979520134471002311829609418851197712981278599801890284580462045320342763425350346993712023497','240527652650142501186806799007079234891582518896181183967568447048687524989499217005384145411928454061519429890901608266451799002152193953387417044584445134473374659118771312644369','340039923642449279354162483683164644490467845275710688039188360378466777257305264437410517533406783884488560090324611039932458344591376329188133802310439028591680957488887235360401','952749334052660138775184853827563799290124266135109628571511655106300475284551793864868492749331897926431075429653760432927083033931884888589365857747666357249706890890271294135606','409042037168124017829123216084996712001940962553213417934617872871049242049505912707276327738856099684435470673554543506944813082143336601373965324845458056155910961121760093965763','446818669068696510364075645555779785837289957835050121929107047755726849319563245903939947361492270471024186444248019606183275011084537877691844278904904007797009992495994930847576','337020825314086026831558039935718530253089032067402623115041304497965921738671137897853325856101173056811790459006584638843085519115966226539114657752195350632058108973472933106461','555104657395586130158817144365410258929156676273008339621382623620629877764763093703120472314441416823098288808905834574132758939025234887899247336542395007801365337349123072757958','1050635982785829616612671671899374335935274860226048629233910207997328092306406616044765276125974811204988320224098045554599853938519146264176965483968539859593173498644608527746349','172555590422758748297094948619949830278664488524565864678765079328384443538787511277114525833822800326984083076698988917383733665013903639001559201825926497745919423909277899072846','565420548384999189978163574793917369411590229245576734883596426164874080016478733460484320891681138880766984050513324276069501106134049026652970208409808575381609904133283205526875','1114920134357391685877325523653275316850698305075557990141115625440563200952527951396046082157126020480499999419046824408669698703280917447949274476351800080742254956374594376947426','466019656160775265639848009941096455603194530576332894420741442256146488249382039165409697668826531524208177638157120906997586440216276413071852566298287860669551029379824623810993'];
                const opts = {
                    module: MyBigInt.fromString('1124647960376846602400564492846161775880117519821061909843377378672508473643724471904307408668308140917340359609154681386349469636749329275022205539567789391720380756556841680734437'),
                    seed: MyBigInt.fromString('628956272417518391983987458397534499260093095944671184582945377219375734257726786363611196319521863356808639125874426768774037966981820049252336159314608532490229794148382178492297')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-14 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(48469);
                });

                it('BBS-Test-14 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
            describe('BBS-Test-15 All', () => {

                const zs = ['514531129458626422598637963117766542144178466920685181732847154713468119554404483580375840413803570589508549909925788445327012981576015057252644974162553557093260085610417263158345888329285546692999406828245990806622018052701232643773608916050069886665','892322108204975503701172052538954026001263240344759722508328436736091762446640026674400344957252728438200399115840727569642076643041404124154088788606079681805235389184183695462101743375867756264979910202068532868553413238175064385428037700243043740145','807292835002300421179425643167585064719265215107615930567118729490739440753045897369437903064037191426065548787099566916321599992468977824670968779130454416641341125185033918913644154280730983254977277924585587500550751192540261245244091667232276166747','342404831339151070883142047406395991605092324598359785384115783142554420180594651408612585857088739397082288131463048634082362281020165333799050597604066786677624607237119203233985682810795974088459476489104413570904317905373600822486893428641220959174','198337344436248528774647714119194693477034389071390749448382172596783657584961681428786819776568317603289326111783769251978886506249511451710499795738490266428631478956587807683665004195033085478183136862242923884012674930783294716578971016522603814011','1245046790846356381841117404411014619932252892807144633010105128027958965705582711194197842352302776825902945027987117449054210138657428828995559819874157065923746402905377620589227924236307118338178303093810089537155185854774745090833900527381119492340','141175670702150836746885718507992055158606814086023547950009463408311625146533197993876828117772625705149818661378338886019528350143226564819133142056274797365065493242662215472264895217690136724702532584482821966492647694627795535302635185918986203511','1217860678429939863116241801932974643524722696903769133097974979367714258312463868530682839380622717870857418234467202553037326535156590335529934165423603373302854644576016984556687952341389450776285809153997325365850268469544490850180316325809900998485','1231798857578343561177227373642356926863845971114123321266587640494627055465252755174044855425519725167553246004071093211062209525055442263326809456647346404174553767916311855941025573920768218766686458410696266215889403218632774816216009029929538519029','1749012980300715883917424808087199152071004232299910350719233713455970019253330816883671559326213797746954373677247635748590793273661027584918855013846634973787384493554064007526260995297526470878398208441892526835692005950871886939568369102360871924943','1441187970070096356890757198383814244806185645750168158862510640355869868061171951457646956360077744265948744620046522073686749476363526825554165158779189479887530523615359726892849347517857510677556695318015383360368840273591088019320770971319695769232','816708541458104664433154768960781288275278010632192568065568805943616482876743186173596419192828237449213927158242393897218671656694910834151306287763702335316494103896173323633992893812245232592544515640159491298250592556702087760150300639176853174969','1089382980446344263353302243677370847829928698159771859664839950359945285956259852819375583819942144037376370957449043034843274554797519140862828747617722002059745752854310367314706189775355451770293700452628012936629787268081958851483860164354962488795','62981398848781226723344253308622162933539622257889311696709959230947647800782653856872869490126432751003844946820382130429648659402778209187202778756964805890441191216053511343804652908126334908732224285379821789388601850904976147205046306577263127170','754452642356254948133437920040450276553418469433418002002363940193245353712569384921103399673088157972673103458607306500928155305687177898700422322644226040391377245222119935128072359519900058102212109977974997773992798677589949656253681832823583162539','634070841643742819118222431757856922792651060848627897095766892997665975057109635052508192128229757505154992026452609933576418720698232266128431068088846769139195518163390098427546260597684051617267812677158542742834970726367770887765815510899071419141'];
                const opts = {
                    module: MyBigInt.fromString('2091348008429907334145549228029841909951843628404404528062038902763752527076993319625371273500320156767247100712156373286039214551639537169010428412841992796208193874250850915106271018050807064443389755726441654141354184044537224037025991131563542447469'),
                    seed: MyBigInt.fromString('1495759134472830488164159360561970211338542945588896486560785624935245971559840587056073627188849070302714772635628341794868813435343596421938765193521695198613767705366708910673060454013733421332894083628127413579292021605102763367401017816366619203529')
                };
                const c = new MyBBS(opts);

                it('BBS-Test-15 bits should match', () => {
                    const bitstring = c.randomByte(true) + c.randomByte(true);
                    expect(parseInt(bitstring, 2)).to.equal(60379);
                });

                it('BBS-Test-15 random values should match', () => {
                    const h = c.history.map(v => v.toString());
                    expect(h).to.deep.equal(zs);
                });
            });
    });

})('function' === typeof require ? [require('../MyBigInt/mybigint.js'), require('../MyBBS/mybbs.js'), require('chai').expect] : [MyBigInt, MyBBS, chai.expect]);