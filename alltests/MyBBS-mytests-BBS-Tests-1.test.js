
(([MyBigInt, MyBBS, expect]) => {

    describe('[TASK4] MyBBS-mytests-BBS-Tests-1', () => {
    
            describe('BBS-p-1', () => {
                const s = MyBigInt.fromString('10');
                const ps = ['11','19','23','31','43','47','59','67','71','79'];

                ps.forEach((p, i) => {
                    it(`BBS-p-1 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-2', () => {
                const s = MyBigInt.fromString('1000');
                const ps = ['1019','1031','1039','1051','1063','1087','1091','1103','1123','1151'];

                ps.forEach((p, i) => {
                    it(`BBS-p-2 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-3', () => {
                const s = MyBigInt.fromString('4711');
                const ps = ['4723','4751','4759','4783','4787','4799','4831','4871','4903','4919'];

                ps.forEach((p, i) => {
                    it(`BBS-p-3 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-4', () => {
                const s = MyBigInt.fromString('25454325');
                const ps = ['25454327','25454339','25454347','25454371','25454383','25454411','25454447','25454467','25454531','25454543'];

                ps.forEach((p, i) => {
                    it(`BBS-p-4 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-5', () => {
                const s = MyBigInt.fromString('235324534543');
                const ps = ['235324534559','235324534639','235324534663','235324534667','235324534723','235324534727','235324534867','235324534967','235324535119','235324535123'];

                ps.forEach((p, i) => {
                    it(`BBS-p-5 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-6', () => {
                const s = MyBigInt.fromString('3534346454764568');
                const ps = ['3534346454764579','3534346454764583','3534346454764591','3534346454764751','3534346454764787','3534346454764967','3534346454765051','3534346454765111','3534346454765207','3534346454765339'];

                ps.forEach((p, i) => {
                    it(`BBS-p-6 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-7', () => {
                const s = MyBigInt.fromString('9650608768068965975976598');
                const ps = ['9650608768068965975976647','9650608768068965975977087','9650608768068965975977199','9650608768068965975977367','9650608768068965975977379','9650608768068965975977547','9650608768068965975977607','9650608768068965975977663','9650608768068965975977847','9650608768068965975977871'];

                ps.forEach((p, i) => {
                    it(`BBS-p-7 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-8', () => {
                const s = MyBigInt.fromString('1045065947568056805087680568056665');
                const ps = ['1045065947568056805087680568057023','1045065947568056805087680568057119','1045065947568056805087680568057163','1045065947568056805087680568057227','1045065947568056805087680568057259','1045065947568056805087680568057367','1045065947568056805087680568057611','1045065947568056805087680568058099','1045065947568056805087680568058139','1045065947568056805087680568058231'];

                ps.forEach((p, i) => {
                    it(`BBS-p-8 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-9', () => {
                const s = MyBigInt.fromString('346303950348394894385958928534593852985298529');
                const ps = ['346303950348394894385958928534593852985298599','346303950348394894385958928534593852985299031','346303950348394894385958928534593852985299187','346303950348394894385958928534593852985299203','346303950348394894385958928534593852985299271','346303950348394894385958928534593852985299371','346303950348394894385958928534593852985299379','346303950348394894385958928534593852985299511','346303950348394894385958928534593852985299547','346303950348394894385958928534593852985299599'];

                ps.forEach((p, i) => {
                    it(`BBS-p-9 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-10', () => {
                const s = MyBigInt.fromString('436045695945694506456459643843593469457065796945843823');
                const ps = ['436045695945694506456459643843593469457065796945844043','436045695945694506456459643843593469457065796945844131','436045695945694506456459643843593469457065796945844659','436045695945694506456459643843593469457065796945845091','436045695945694506456459643843593469457065796945845279','436045695945694506456459643843593469457065796945845331','436045695945694506456459643843593469457065796945845559','436045695945694506456459643843593469457065796945845607','436045695945694506456459643843593469457065796945845811','436045695945694506456459643843593469457065796945846147'];

                ps.forEach((p, i) => {
                    it(`BBS-p-10 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
            describe('BBS-p-11', () => {
                const s = MyBigInt.fromString('952439565436545698821381328518435943692456576030730499513281285185845823');
                const ps = ['952439565436545698821381328518435943692456576030730499513281285185845943','952439565436545698821381328518435943692456576030730499513281285185846087','952439565436545698821381328518435943692456576030730499513281285185846139','952439565436545698821381328518435943692456576030730499513281285185846711','952439565436545698821381328518435943692456576030730499513281285185847111','952439565436545698821381328518435943692456576030730499513281285185847123','952439565436545698821381328518435943692456576030730499513281285185847227','952439565436545698821381328518435943692456576030730499513281285185847251','952439565436545698821381328518435943692456576030730499513281285185847731','952439565436545698821381328518435943692456576030730499513281285185847851'];

                ps.forEach((p, i) => {
                    it(`BBS-p-11 p${i}`, () => {
                        s._nextBlumPrime();
                        expect(s.toString()).to.equal(p);
                    });
                });
            });
    });

})('function' === typeof require ? [require('../MyBigInt/mybigint.js'), require('../MyBBS/mybbs.js'), require('chai').expect] : [MyBigInt, MyBBS, chai.expect]);