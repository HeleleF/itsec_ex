
(([MyBigInt, expect]) => {
    

    describe('[TASK2] MyBigInt-mytests-Power-Big-Tests', () => {
    
            it('Power-Big-HexDec-1', () => {
                const a = MyBigInt.fromString('1');
                const b = MyBigInt.fromString('2343');
                const c = a.pow(b);

                expect(c.toString()).to.equal('1');
            });
            it('Power-Big-HexDec-2', () => {
                const a = MyBigInt.fromString('2');
                const b = MyBigInt.fromString('2046');
                const c = a.pow(b);

                expect(c.toString()).to.equal('8079251517827751825178719172167487990111025667428871008032586356881163784716972723299300352880728365922179490230474504873529889787622730273772038096612070780157719341825249022937549437597413026699014409596016892069198054660654939040459523584619042617645411463009076260721893972885266452151888099780982596380478583347417085605171243696641142373714044008831580514519451414832756548177115078537564648216044279181485900929615464339399587788075411476100924403308321807806781421177705052431289275431732830867419635645164174483761499317088249659553881291597359333885900533858307401161329619651238037048388963402764899057664');
            });
            it('Power-Big-HexDec-3', () => {
                const a = MyBigInt.fromString('3');
                const b = MyBigInt.fromString('636');
                const c = a.pow(b);

                expect(c.toString()).to.equal('2812664952875311166517606953755665064219382448844790570638352576069230715767725299562773466458556890873979973973744554151934652474803991827298653036095123461439231227196192790717918139101881185042497725068882044251379247204054314079366064178650410673666069483087549218522875740996972783183948402685971121');
            });
            it('Power-Big-HexDec-4', () => {
                const a = MyBigInt.fromString('5');
                const b = MyBigInt.fromString('430');
                const c = a.pow(b);

                expect(c.toString()).to.equal('3606632272572553039358957329100325561659614734397075013711827752501160230578562212048733825122019831936860030989679012018601257725611655335428489419308817472311142892828705536889314687227061720649534247486344484985043546336310886635273938188696889289286463841678609387741971659124828875064849853515625');
            });
            it('Power-Big-HexDec-5', () => {
                const a = MyBigInt.fromString('7');
                const b = MyBigInt.fromString('310');
                const c = a.pow(b);

                expect(c.toString()).to.equal('9558558543260583165391525314644338943775755786796379052182024300144890897170271010898540608036825099764024608221040945844431222197956095183839999259755290841924448537606819300679679567195077429573289123678479557595265571232095582635538799271648064900640243295249');
            });
            it('Power-Big-HexDec-6', () => {
                const a = MyBigInt.fromString('10');
                const b = MyBigInt.fromString('303');
                const c = a.pow(b);

                expect(c.toString()).to.equal('1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
            });
            it('Power-Big-HexDec-7', () => {
                const a = MyBigInt.fromString('13');
                const b = MyBigInt.fromString('255');
                const c = a.pow(b);

                expect(c.toString()).to.equal('113646178932168156590832063401930193308816246875867711645436816520209579444954138804100151624139917235781981573244918696498125093563940369939569290607407990694476917947091933079612787004229755105457901414544866289295781776362444762454164511309967325358514401702203942469313319973429957');
            });
            it('Power-Big-HexDec-8', () => {
                const a = MyBigInt.fromString('13');
                const b = MyBigInt.fromString('256');
                const c = a.pow(b);

                expect(c.toString()).to.equal('1477400326118186035680816824225092513014611209386280251390678614762724532784403804453301971113818924065165760452183943054475626216331224809214400777896303879028199933312195130034966231054986816370952718389083261760845163092711781911904138647029575229660687222128651252101073159654589441');
            });
            it('Power-Big-HexDec-9', () => {
                const a = MyBigInt.fromString('3');
                const b = MyBigInt.fromString('1025');
                const c = a.pow(b);

                expect(c.toString()).to.equal('1120175546223060130598879262554599764676229330351202023251910795166237121851795753689981066816411931661406295196294425474326181163776482575744054010948427561942575245782787742816421059855869212856715454123140043866392208776553004037021851895189724194857457160169138705377804688175771764853964380621517808607129643422328191746433581176966268754358453380240056425762233869082556187556298587127211191956455958429250778791459918661020721041697769572891595583096247822588830433182107001131069443');
            });
            it('Power-Big-HexDec-10', () => {
                const a = MyBigInt.fromString('3');
                const b = MyBigInt.fromString('1290');
                const c = a.pow(b);

                expect(c.toString()).to.equal('3064916084928239511183125868839728047304367656783743940947440963003794924876762777126073721981524399123944931399967048885684410210259342175105600493733556827379926315428468652337260014548045763858931617358465287253844721056270101136251131184505429796418772170380874687382632063681861653015594351547231428101098979043292591750462024328906184620095546405331464899477024207688310868097225876685739195048645552709659609732576524823406750880873017264712013695599460300679602884861680218238289460431011464572475242855027653692496064658675429535971049897233268809420922111338999153058087400094320576105576686337150348577449');
            });
    });

})('function' === typeof require ? [require('../MyBigInt/mybigint.js'), require('chai').expect] : [MyBigInt, chai.expect]);