
(([MyBigInt, expect]) => {
    

    describe('[TASK1] MyBigInt-mytests-Convert-Hex-Tests', () => {
    
            it('dec-Hex-1', () => {
                const a = MyBigInt.fromString('0');
                expect(a.toString16().padStart(2, "0")).to.equal('00');
            });
            it('dec-Hex-2', () => {
                const a = MyBigInt.fromString('1');
                expect(a.toString16().padStart(2, "0")).to.equal('01');
            });
            it('dec-Hex-3', () => {
                const a = MyBigInt.fromString('7');
                expect(a.toString16().padStart(2, "0")).to.equal('07');
            });
            it('dec-Hex-4', () => {
                const a = MyBigInt.fromString('8');
                expect(a.toString16().padStart(2, "0")).to.equal('08');
            });
            it('dec-Hex-5', () => {
                const a = MyBigInt.fromString('15');
                expect(a.toString16().padStart(2, "0")).to.equal('0F');
            });
            it('dec-Hex-6', () => {
                const a = MyBigInt.fromString('16');
                expect(a.toString16().padStart(2, "0")).to.equal('10');
            });
            it('dec-Hex-7', () => {
                const a = MyBigInt.fromString('65537');
                expect(a.toString16().padStart(2, "0")).to.equal('10001');
            });
            it('dec-Hex-8', () => {
                const a = MyBigInt.fromString('1283248328534');
                expect(a.toString16().padStart(2, "0")).to.equal('12AC78F8F56');
            });
            it('dec-Hex-9', () => {
                const a = MyBigInt.fromString('325436436457657657');
                expect(a.toString16().padStart(2, "0")).to.equal('4842EB6F8071539');
            });
            it('dec-Hex-10', () => {
                const a = MyBigInt.fromString('6456456576585865858865876');
                expect(a.toString16().padStart(2, "0")).to.equal('55735365C37D2C2275AD4');
            });
            it('dec-Hex-11', () => {
                const a = MyBigInt.fromString('12412342354326456457766584568586797696598980000');
                expect(a.toString16().padStart(2, "0")).to.equal('22C96B3CB825414CC1FC85B658C4A448DACB5A0');
            });
            it('dec-Hex-12', () => {
                const a = MyBigInt.fromString('4534346436456456456567879800908797687546535432121242124');
                expect(a.toString16().padStart(2, "0")).to.equal('2F573DBB43F0C18B04E060D444CFC97E65285C8A3C520C');
            });
            it('dec-Hex-13', () => {
                const a = MyBigInt.fromString('124325435436457756876987980078978745655341324325436457657689870780780870');
                expect(a.toString16().padStart(2, "0")).to.equal('12037C983EC814537E574F7BBC6574EEF7131BAA074C264952192F46D146');
            });
            it('dec-Hex-14', () => {
                const a = MyBigInt.fromString('1234943439403003994594343503099328834950605949432832832832181284393959454606004034392293');
                expect(a.toString16().padStart(2, "0")).to.equal('27BB1BA32B141719462E71FA5C3B9D0F9570791C9DB57727B7826BDABCF55A201FE76D0E5');
            });
            it('dec-Hex-15', () => {
                const a = MyBigInt.fromString('645645657658586585886587612412342354326456457766584568586797696598980000');
                expect(a.toString16().padStart(2, "0")).to.equal('5D8C54150168AC373EB86E1E437B2FC9866BF2B925EC51EE4A448DACB5A0');
            });
            it('dec-Hex-16', () => {
                const a = MyBigInt.fromString('124123423543264564577665845685867976965989800004534346436456456456567879800908797687546535432121242124');
                expect(a.toString16().padStart(2, "0")).to.equal('E2FE91D84A9865161913BDA46D45F637D19586665CCA12250502B9217E7C2F8052A40E65285C8A3C520C');
            });
            it('dec-Hex-17', () => {
                const a = MyBigInt.fromString('4534346436456456456567879800908797687546535432121242124124325435436457756876987980078978745655341324325436457657689870780780870');
                expect(a.toString16().padStart(2, "0")).to.equal('1ACB3F55BBA8DF58DAF7D86240BFF2D0B2035BB3BFB99D380208AB750A67B00BF31E348C615706BC725236934C264952192F46D146');
            });
            it('dec-Hex-18', () => {
                const a = MyBigInt.fromString('1243254354364577568769879800789787456553413243254364576576898707807808701234943439403003994594343503099328834950605949432832832832181284393959454606004034392293');
                expect(a.toString16().padStart(2, "0")).to.equal('16A362559F6D032BE2217C1B9DF1FC8293AF88A3ECD36C13752921180D4F91B381A98EAA6D9CD73D5F53ECFDD66A1082A7DDF4062F3A07E26BDABCF55A201FE76D0E5');
            });
            it('dec-Hex-19', () => {
                const a = MyBigInt.fromString('6456456576585865858865876124123423543264564577665845685867976965989800004534346436456456456567879800908797687546535432121242124');
                expect(a.toString16().padStart(2, "0")).to.equal('2626E227594A570EC8D632EA360221C17B9800B50FA1F37D53314FB7B1D0BC930565EA61CF16135B7C2F8052A40E65285C8A3C520C');
            });
            it('dec-Hex-20', () => {
                const a = MyBigInt.fromString('12432543543645775687698798007897874565534132432543645765768987078078087012349434394030039945943435030993288349506059494328328328321812843939594546060040343922931234943439403003994594343503099328834950605949432832832832181284393959454606004034392293');
                expect(a.toString16().padStart(2, "0")).to.equal('1C7338981718BD2B7D06F25886804CA6935D8A7ED7A0FFD791467614198C21A2BE112EDF35E6DA8EEF2BBB4CBD211DAC3AEEEBCF42735CD030FE2F30DF92C858303ED6CB2209DF64C4A719FB70ED1FD094A7BCE810E66E4595DD777D26BDABCF55A201FE76D0E5');
            });
            it('dec-Hex-21', () => {
                const a = MyBigInt.fromString('6456456576585865858865876453434643645645645656787980090879768754653543212124212412349434394030039945943435030993288349506059494328328328321812843939594546060040343922931243254354364577568769879800789787456553413243254364576576898707807808701234943439403003994594343503099328834950605949432832832832181284393959454606004034392293');
                expect(a.toString16().padStart(2, "0")).to.equal('1F26C8918C6325938E8AD93A08C532F5330FC906C912E739872C0AE0FB11EBBE6A521B214A6AF3EF6F1D7910DD4E60ED7F564FBCF6095C0ACB7B07F0C2F656231CBEC47827D5AD06197D887202E98C463C5C9F8C337C24A25EC8CE2AF25A6E4ABBA7FBB4537F512FB1EE177CD82DD6F9091E3EB06082A7DDF4062F3A07E26BDABCF55A201FE76D0E5');
            });
            it('dec-Hex-22', () => {
                const a = MyBigInt.fromString('12412342354326456457766584568586797696598980000453434643645645645656787980090879768754653543212124212412432543543645775687698798007897874565534132432543645765768987078078087064564565765858658588658764534346436456456456567879800908797687546535432121242124');
                expect(a.toString16().padStart(2, "0")).to.equal('1B1688ECCD084A5C70415ED76B09C0CB3D4CF211E10A57B8A3F0912169B4B0EEDF51A87E304A04678E8FC482F6E4024EACA50F1D15ADA528B5484B7CC96F8D69EC1E3D2E961ABB6FD344998D004E46D9B874AC47F57E4D5505EEA4B730A19975355A065285C8A3C520C');
            });
            it('dec-Hex-23', () => {
                const a = MyBigInt.fromString('123494343940300399459434350309932883495060594943283283283218128439395945460600403439229312432543543645775687698798007897874565534132432543645765768987078078087012349434394030039945943435030993288349506059494328328328321812843939594546060040343922931243254354364577568769879800789787456553413243254364576576898707807808701234943439403003994594343503099328834950605949432832832832181284393959454606004034392293');
                expect(a.toString16().padStart(2, "0")).to.equal('1419CCB955906491B66AABC6278B3FAF9FFE3F03C8C12492F7F9A5869FCC31C70D2EF1B1D3CC52B9C65895DC0BB5B9530F750F1BF423FE61975AAB77298F4735CCB85D083F18EF2DDF4EEA8D833BFB28AA64A377FB2BA948B0CB154988F791EA0431156D1E118D533C28C2960244F9C5DE5078A2680A1499C3E214B6B6A22FAA050A377248F18730BA598E177CD82DD6F9091E3EB06082A7DDF4062F3A07E26BDABCF55A201FE76D0E5');
            });
    });

})('function' === typeof require ? [require('../MyBigInt/mybigint.js'), require('chai').expect] : [MyBigInt, chai.expect]);